[projection] id="proj_scr5" type="mpcdi" screen="scr5" origin=mpcdi_origin pfm="C:\Users\Case3d\Desktop\Pfms\Jacim3.pfm"
[projection] id="proj_scr4" type="mpcdi" screen="scr4" origin=mpcdi_origin pfm="C:\Users\Case3d\Desktop\Pfms\Jacim4.pfm"
[projection] id="proj_scr3" type="mpcdi" screen="scr3" origin=mpcdi_origin pfm="C:\Users\Case3d\Desktop\Pfms\Jacim3.pfm"
[projection] id="proj_scr2" type="mpcdi" screen="scr2" origin=mpcdi_origin pfm="C:\Users\Case3d\Desktop\Pfms\Jacim3.pfm"
[projection] id="proj_scr1" type="mpcdi" screen="scr1" origin=mpcdi_origin pfm="C:\Users\Case3d\Desktop\Pfms\Jacim3.pfm"
# AUTO_CONVERSION, new entities finish


#####################################################################
# nDisplay config file
#
# This file demonstrates how to configure a simple powerwall based
# on 3 PCs. Each PC manages 2 output displays aligned vertically.
# This setup is based on the 'wall_flat_3x2.cfg' file. The only
# difference is the rotation of displays on the left and right side.
#
# This configuration describes unwrapped CAVE. You can run it on a
# single PC.
#
# Note:
# Before use, make sure all settings correspond to your system.
#####################################################################


#####################################################################
# Config info
#********************************************************************
# This is a config file header.
#
# Properties:
# version - specifies the version of the configuration file (UE4.xx)
#********************************************************************
[info] version="23"


#####################################################################
# Cluster nodes
#********************************************************************
# Cluster node is an application instance. It's allowed to use
# multiple instances on the same PC. Sometimes its necessary.
#
# Properties:
# id       - Unique node name
# window   - Window ID
# addr     - Network address (IPv4 only)
# master   - Specifies if current node is master; default is 'false'
# port_cs  - Cluster Synchronization port (required on master node only)
# port_ss  - Swap Synchronization port (required on master node only)
# port_ce  - Cluster Events port (required on master node only)
#
# Optional properties:
# eye_swap - Swap eyes for this node; default is 'false'
# sound    - turns on/off sound for this application instance; default is 'false'
#********************************************************************
# Here we have 6 cluster nodes. Each application instance renders its
# own projection(s). Master node is on the first PC.
[cluster_node] id=node3 addr=127.0.0.1 window=w3 port_cs=41001 port_ss=41002 port_ce=41003 master=true sound=true
[cluster_node] id=node5 addr=127.0.0.1 window=w5
[cluster_node] id=node4 addr=127.0.0.1 window=w4
[cluster_node] id=node2 addr=127.0.0.1 window=w2
[cluster_node] id=node1 addr=127.0.0.1 window=w1


#####################################################################
# Application windows
#********************************************************************
# The window entitty defines properties of application's game window.
#
# Properties:
# id         - Unique window name
# fullscreen - Fullscreen or windowed mode
# winx       - X location
# winy       - Y location
# resx       - Width
# resy       - Height
# viewports  - Array of viewports
#********************************************************************
# Here we have 6 windows. Since we have 2 windows per PC, we cannot
# used fullscreen mode. However we can simulate by using windowed mode
# and a display size. Assuming each PC has 2 FullHD displays vertically
# aligned, we explicitly specify windows geometry.
[window] id=w1 viewports=view1   fullscreen=false WinX=0    WinY=0   ResX=500 ResY=500
[window] id=w2 viewports=view2   fullscreen=false WinX=500    WinY=0   ResX=500 ResY=500
[window] id=w3 viewports=view3   fullscreen=false WinX=1000    WinY=0   ResX=500 ResY=500
[window] id=w4 viewports=view4   fullscreen=false WinX=1500    WinY=0   ResX=500 ResY=500
[window] id=w5 viewports=view5   fullscreen=false WinX=2000    WinY=0   ResX=500 ResY=500


#####################################################################
# List of projection screens
#********************************************************************
# Projection screen is a rectangle which determines the camera frustum.
# Usually the projection screen has the same dimensions as an output
# display but in some cases it may differ.
#
# Properties:
# id     - unique projection screen name
# loc    - relative location to the parent component. Location is relative
#          to the VR root if no parent specified. The pivot is a screen's
#          center and the values are in meters.
# rot    - relative rotation to the parent component. Rotation is relative
#          to the VR root if no parent specified. The pivot is a screen's
#          center and the values are in degrees.
# size   - width (X) and height (Y) of the screen. Values are in meters.
#
# Optional properties:
# parent     - ID of parent component in VR hierarchy; default is VR root.
# tracker_id - ID of tracking device; no tracking by default.
# tracker_ch - ID of tracking device's channel; no tracking by default.
#********************************************************************
# We have 6 output displays. That means we have to have 6 projection
# screens. Sometimes it's possible to use only one projection screen
# (Nvidia mosaic/surround + projections with blending) but in this
# particular case we use regular FullHD monitors.
[screen] id=scr5  loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=3,Y=3" parent=5c
[screen] id=scr4  loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=3,Y=3" parent=4c
[screen] id=scr3  loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=3,Y=3" parent=3c
[screen] id=scr2  loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=3,Y=3" parent=2c
[screen] id=scr1  loc="X=0,Y=0,Z=0" rot="P=0,Y=0,R=0" size="X=3,Y=3" parent=1c


#####################################################################
# List of viewport configurations
#********************************************************************
# Viewport is a rectangle area of game window where rendered frame is
# mapped. Usually the viewport starts at 0:0 and has the same size as
# its parent window but in some cases these settings may differ.
#
# Properties:
# id     - unique viewport name
# x      - X coordinate of viewport's top left corner
# y      - Y coordinate of viewport's top left corner
# width  - width of viewport in pixels
# height - height of viewport in pixels
#********************************************************************
# In this example all output displays are the same. We'll be using
# the same viewport configuration for all cluster nodes.
[viewport] id=view5 x=0 y=0 width=500 height=500 projection="proj_scr5"
[viewport] id=view4 x=0 y=0 width=500 height=500 projection="proj_scr4"
[viewport] id=view3 x=0 y=0 width=500 height=500 projection="proj_scr3"
[viewport] id=view2 x=0 y=0 width=500 height=500 projection="proj_scr2"
[viewport] id=view1 x=0 y=0 width=500 height=500 projection="proj_scr1"


#####################################################################
# List of cameras
#********************************************************************
# Camera is a predefined point frome where the stereoscopic view built.
# It's possible to define multiple cameras and swith the active one
# during runtime. You're free to attach any camera to a tracking device
# for head tracking. Consider a camera as a viewer's head.
#
# Properties:
# id  - unique camera name
# loc - relative location to the parent component. Location is relative
#       to the VR root if no parent specified.
# rot - relative rotation to the parent component. Rotation is relative
#       to the VR root if no parent specified.
#
# Optional properties:
# parent     - ID of parent component in VR hierarchy; default is VR root.
# tracker_id - ID of tracking device; no tracking by default.
# tracker_ch - ID of tracking device's channel; no tracking by default.
#********************************************************************
# In this example we have only one static camera (no tracking).
[camera] id=camera_static loc="X=0,Y=0,Z=0" parent=socket_cam eye_swap="false" eye_dist="64" force_offset="0"


#####################################################################
# List of scene nodes nodes (hierarchy transforms)
#********************************************************************
# Scene node is an actor component which is basically a transformation
# matrix. Scene nodes can be helpful to build a component hierarchy, to
# define some special places (like a socket) within VR space.
#
# It might be difficult to understand what VR space origin is. Consider
# it as a point in space where VR space starts. Any componenent listed
# in this config file is relative to its parent or this origin.
#
# Properties:
# id  - unique scene node name
# loc - relative location to the parent component. Location is relative
#       to the VR root if no parent specified.
# rot - relative rotation to the parent component. Rotation is relative
#       to the VR root if no parent specified.
#
# Optional properties:
# parent     - ID of parent component in VR hierarchy; default is VR root.
# tracker_id - ID of tracking device; no tracking by default.
# tracker_ch - ID of tracking device's channel; no tracking by default.
#********************************************************************
# Here we build our VR hierarchy.
[scene_node] id=cave_origin  loc="X=0,Y=0,Z=0"      rot="P=0,Y=0,R=0"
[scene_node] id=eye_level    loc="X=0,Y=0,Z=1.2"    rot="P=0,Y=0,R=0"   parent=cave_origin
[scene_node] id=half		 loc="X=0,Y=0,Z=1.5"    rot="P=0,Y=0,R=0"   parent=cave_origin

[scene_node] id=3c           loc="X=2.5,Y=0,Z=0"    rot="P=0,Y=0,R=0"   parent=half
[scene_node] id=3r           loc="X=0,Y=1.5,Z=0"  rot="P=0,Y=72,R=0"  parent=3c

[scene_node] id=4c           loc="X=0,Y=1.5,Z=0"    rot="P=0,Y=0,R=0"   parent=3r
[scene_node] id=4r           loc="X=0,Y=1.5,Z=0"  rot="P=0,Y=72,R=0"  parent=4c

[scene_node] id=5c           loc="X=0,Y=1.5,Z=0"    rot="P=0,Y=0,R=0"   parent=4r
[scene_node] id=5r           loc="X=0,Y=1.5,Z=0"  rot="P=0,Y=72,R=0"  parent=5c

[scene_node] id=2r           loc="X=0,Y=-1.5,Z=0"  rot="P=0,Y=-72,R=0"  parent=3c
[scene_node] id=2c           loc="X=0,Y=-1.5,Z=0"    rot="P=0,Y=0,R=0"   parent=2r

[scene_node] id=1r           loc="X=0,Y=-1.5,Z=0"  rot="P=0,Y=-72,R=0"  parent=2c
[scene_node] id=1c           loc="X=0,Y=-1.5,Z=0"    rot="P=0,Y=0,R=0"   parent=1r

[scene_node] id=socket_cam   loc="X=0,Y=0,Z=0"      rot="P=0,Y=0,R=0"   parent=eye_level
[scene_node] id=wand         loc="X=0,Y=0,Z=1"      rot="P=0,Y=90,R=0"


#####################################################################
# List of input devices
#********************************************************************
# Input devices are VRPN devices. The nDisplay supports the following
# types: analog, button and tracker. Many of physical input devices
# can be connected via VRPN.
#
# Properties:
# id    - nique device name
# type  - VRPN type (analog, button or tracker).
# addr  - address of a VRPN server which handles this particular device.
#         The value must match the following format: DEVICENAME@SERVER_ADDRESS
#         where DEVICENAME is a VRPN name of this device and SERVER_ADDRESS
#         is IPv4 address of VRPN server.
# loc   - relative location to the parent component. Location is relative
#         to the VR root if no parent specified.
# rot   - relative rotation to the parent component. Rotation is relative
#         to the VR root if no parent specified.
#
# front (tracker only) - mapping of a tracking system axis to X axis of VR origin
# right (tracker only) - mapping of a tracking system axis to Y axis of VR origin
# up    (tracker only) - mapping of a tracking system axis to Z axis of VR origin
# * The following values are allowed for axes mapping: X, -X, Y, -Y, Z, -Z
#
# Optional properties:
# remap - VRPN device channel remapping. Value format is: "from0:to0,from1:to1,...,fromN:toN".
#         For example: remap="0:3,1:4,5:2"
#********************************************************************
[input] id=MAxis     type=analog  addr=Mouse0@127.0.0.1
[input] id=MButtons  type=buttons addr=Mouse0@127.0.0.1
[input] id=KButtons  type=buttons addr=Keyboard0@127.0.0.1


#####################################################################
# Stereoscopic settings
#********************************************************************
# Properties:
# eye_dist - interoccular distance in meters
[stereo]


#####################################################################
# General settings
#********************************************************************
# Properties:
# swap_sync_policy - swap synchronization policy
#                  - 0 - no synchronization
#                  - 1 - software swap synchronization
#                  - 2 - NV swap lock (Nvidia cards only, OpenGL only)
[general] swap_sync_policy=1


#####################################################################
# Network settings
#********************************************************************
# Optional properties:
# cln_conn_tries_amount - how many times a client tries to connect to a server
# cln_conn_retry_delay  - delay before next client connection try (milliseconds)
# game_start_timeout    - timeout before all data is loaded and game started (milliseconds)
# barrier_wait_timeout  - barrier timeout for both game and render threads (milliseconds)
[network] cln_conn_tries_amount=10 cln_conn_retry_delay=1000 game_start_timeout=30000 barrier_wait_timeout=5000


#####################################################################
# Custom arguments
#********************************************************************
# Any custom arguments available in runtime can be specified here.
# Format:  ARG_NAME=ARG_VAL
[custom] SampleArg1=SampleVal1 SampleArg2=SampleVal2
